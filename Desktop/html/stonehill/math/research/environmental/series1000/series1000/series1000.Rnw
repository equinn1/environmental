\documentclass{article}

\begin{document}

<<>>=
library(shinystan)
series <- matrix(scan("Series1000.txt"), nrow=1000, ncol=135, byrow=TRUE)
T <- 135
N <- 1000

#pdf("series_1.pdf", height=5, width=6)
par(mar=c(3,3,2,0), tck=-.01, mgp=c(1.5,.5,0))
plot(c(1,T), range(series), bty="l", type="n", xlab="Time", ylab="series")
for (n in 1:N){
  lines(1:T, series[n,], lwd=.5)
}
#dev.off()

library("arm")
slope <- rep(NA, N)
se <- rep(NA, N)
for (n in 1:N){
  data <- series[n,]
  time <- 1:T
  fit <- lm(data ~ time)
  slope[n] <- 100*coef(fit)[2]
  se[n] <- 100*se.coef(fit)[2]
}

#pdf("series_2.pdf", height=5, width=6)
par(mar=c(3,3,2,0), tck=-.01, mgp=c(1.5,.5,0))
plot(slope, se, bty="l", xlab="Slope", ylab="SE", pch=20, cex=.5)
#dev.off()

#pdf("series_3.pdf", height=5, width=6)
par(mar=c(3,3,2,0), tck=-.01, mgp=c(1.5,.5,0))
hist(slope, xlab="Slope", breaks=seq(floor(10*min(slope)), ceiling(10*max(slope)))/10)
#dev.off()

library("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

y <- slope
K <- 3
mu <- c(0,-1,1)
mix <- stan("mixture.stan")
print(mix, pars=c("theta", "sigma"))

launch_shinystan(mix)

prob_sims <- extract(mix, "p")$p
prob <- array(NA, c(N,K))
for (n in 1:N){
  for (k in 1:K){
    prob[n,k] <- mean(prob_sims[,n,k])
  }
}
max_prob <- apply(prob, 1, max)
choice <- apply(prob, 1, which.max)
expected_correct <- sum(max_prob)
sd_correct <- sqrt(sum(max_prob*(1-max_prob)))
print(table(choice))
pfround(c(expected_correct, sd_correct), 1)

pnorm(expected_correct, 900, sd_correct)
1/pnorm(expected_correct, 900, sd_correct)
1/pnorm(expected_correct, 899.5, sd_correct)

theta_true <- c(.5, .25, .25)
sigma_true <- .4
prob_simple <- array(NA, c(N,K))
for (n in 1:N){
  prob_0 <- theta_true*dnorm(y[n], mu, sigma_true)
  prob_simple[n,] <- prob_0/sum(prob_0)
}
pfround(cbind(prob, prob_simple)[1:10,], 2)

max_prob_simple <- apply(prob_simple, 1, max)
choice_simple <- apply(prob_simple, 1, which.max)
expected_correct_simple <- sum(max_prob_simple)
sd_correct_simple <- sqrt(sum(max_prob_simple*(1 - max_prob_simple)))
print(table(choice_simple))
pfround(c(expected_correct_simple, sd_correct_simple), 1)
1/pnorm(expected_correct_simple, 899.5, sd_correct_simple)

prob_simple_binary <- cbind(prob_simple[,1], prob_simple[,2] + prob_simple[,3])

max_prob_simple_binary <- apply(prob_simple_binary, 1, max)
choice_simple_binary <- apply(prob_simple_binary, 1, which.max)
expected_correct_simple_binary <- sum(max_prob_simple_binary)
sd_correct_simple_binary <- sqrt(sum(max_prob_simple_binary*(1 - max_prob_simple_binary)))
print(table(choice_simple_binary))
pfround(c(expected_correct_simple_binary, sd_correct_simple_binary), 1)
@


\end{document}